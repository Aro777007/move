#include <iostream>
#include <string>
using namespace std;

class arrayy {
private:
    int* m_arr = nullptr;
    int m_size = 0;

public:

    arrayy() {}

    arrayy(int m_size) {
        this->m_size = m_size;
        m_arr = new int[m_size];
    }


    arrayy(const arrayy& obj)

    {
        m_size = obj.m_size;
        m_arr = new int[m_size];
        for (int i = 0; i < m_size; ++i)
        {
            m_arr[i] = obj.m_arr[i];
        }
    }


    arrayy(arrayy&& obj) {
        m_size = obj.m_size;
        m_arr = obj.m_arr;
        obj.m_size = 0;
        obj.m_arr = nullptr;
        cout << "move constructor" << endl;
    }


    arrayy& operator=(arrayy&& obj) {
        if (this != &obj) {
            delete[] m_arr;
            m_size = obj.m_size;
            m_arr = obj.m_arr;
            obj.m_size = 0;
            obj.m_arr = nullptr;
            cout << "move operator assigment" << endl;
        }
        return *this;
    }

    void get_element() {
        for (int i = 0; i < m_size; ++i) {
            m_arr[i] = 1;
        }

        for (int i = 0; i < m_size; ++i) {
            cout << m_arr[i];
        }
    }

    ~arrayy() {
        delete[] m_arr;
    }
};

int main() {
    int size;
    cin >> size;
    arrayy a(size);
    arrayy obj1 = a;
    a.get_element();
    arrayy obj = std::move(a);
    arrayy b;
    b = std::move(arrayy(2));
    return 0;
}
