
#include <iostream>
using namespace std;

class animal
{
private:
    int m_height;

public:
    animal(int& h) : m_height(h) {}

    animal(animal&& obj) : m_height(obj.m_height)
    {
        obj.m_height = 0;

        cout << "animal move constructor" << endl;
    }

    animal() {}

    void f()
    {
        cout << height << endl;
    }
};

class mammal : public animal
{
private:
    int m_legs;

public:

    mammal(int& h, int l) : animal(h), m_legs(l) {}

    mammal(mammal&& obj) : m_legs(obj.m_legs)
    {
        obj.m_legs = 0;

        cout << "mammal move constructor" << endl;
    }

    mammal() {}

    void f1()
    {
        cout << legs << endl;
    }
};

class lion : public mammal
{
private:
    int m_teeth;

public:
    lion(int& h, int l, int t) : mammal(h, l), m_teeth(t) {}

    lion(lion&& obj) : m_teeth(obj.teeth)
    {
        obj.m_teeth = 0;
        cout << "lion move constructor" << endl;
    }

    void f2()
    {
        cout << teeth << endl;
    }

    lion(){}

};

int main()
{
    int m_height = 300;
    int m_legs = 4;
    int m_teeth = 34;

    animal* obj = new mammal;
    animal* obj1 = new lion;

    animal animalObj(m_height);
    animalObj.f();
    animal animalOBJ = std::move(animalOBJ);

    mammal mammalObj(m_height, m_legs);
    mammalObj.f1();
    mammal mammalOBJ = std::move(mammalOBJ);


    lion lionObj(m_height, m_legs, m_teeth);
    lionObj.f2();
    lion lionObj1 = std::move(lionObj);

}

   
